class PuzzleNode:
    def __init__(self, state, parent=None, move=None):
        self.state = state
        self.parent = parent
        self.move = move

def solve_n_puzzle(initial_state):
    def is_goal(state):
        # Verifica si el estado actual es el estado objetivo
        return state == goal_state

    def get_neighbors(node):
        # Genera los nodos vecinos (movimientos válidos)
        neighbors = []
        empty_row, empty_col = node.state.index(0) // N, node.state.index(0) % N  # Encuentra la posición del espacio en blanco

        for dr, dc, move in [(-1, 0, 'UP'), (1, 0, 'DOWN'), (0, -1, 'LEFT'), (0, 1, 'RIGHT')]:
            new_row, new_col = empty_row + dr, empty_col + dc

            if 0 <= new_row < N and 0 <= new_col < N:
                new_state = node.state[:]
                new_state[empty_row * N + empty_col], new_state[new_row * N + new_col] = \
                    new_state[new_row * N + new_col], new_state[empty_row * N + empty_col]
                neighbors.append(PuzzleNode(new_state, parent=node, move=move))

        return neighbors

    N = int(len(initial_state) ** 0.5)
    goal_state = list(range(N * N))

    start_node = PuzzleNode(initial_state)
    stack = [start_node]
    visited = set()

    while stack:
        current_node = stack.pop()
        current_state = current_node.state

        if is_goal(current_state):
            # Reconstruye el camino desde el nodo final hasta el nodo inicial
            path = []
            while current_node:
                if current_node.move:
                    path.append(current_node.move)
                current_node = current_node.parent
            return path[::-1]

        if tuple(current_state) not in visited:
            visited.add(tuple(current_state))
            neighbors = get_neighbors(current_node)
            stack.extend(neighbors)

    return None  # No se encontró una solución

# Ejemplo de uso
initial_state = [1, 2, 3, 0, 4, 6, 7, 5, 8]
solution = solve_n_puzzle(initial_state)
if solution:
    print("Solución encontrada:", solution)
else:
    print("No se encontró una solución.")
